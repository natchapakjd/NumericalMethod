let cramersRule = (x) => {
    let a = [[x[0][0], x[0][1], x[0][2]],
            [x[1][0], x[1][1], x[1][2]],
            [x[2][0], x[2][1], x[2][2]]];
    let a1 = [[x[0][3], x[0][1], x[0][2]],
            [x[1][3], x[1][1], x[1][2]],
            [x[2][3], x[2][1], x[2][2]]];
    let a2 = [[x[0][0], x[0][3], x[0][2]],
            [x[1][0], x[1][3], x[1][2]],
            [x[2][0], x[2][3], x[2][2]]];
    let a3 = [[x[0][0], x[0][1], x[0][3]],
            [x[1][0], x[1][1], x[1][3]],
            [x[2][0], x[2][1], x[2][3]]];
    var x1 = det(a1)/det(a);
    var x2 = det(a2)/det(a);
    var x3 = det(a3)/det(a);
    console.log(det(a),det(a1),det(a2),det(a3));
    check(x1, x2, x3);
}

let check = (x1,x2,x3) => {
    if(-2*x1+3*x2+x3 == 9 && 3*x1+4*x2-5*x3 == 0 && x1-2*x2+x3 == -4)
        console.log("x1:",x1," x2: ",x2," x3: ",x3);
}

let det = (x) =>{
    let ans;
    ans = x[0][0] * (x[1][1] * x[2][2] - x[2][1] * x[1][2])
        - x[0][1] * (x[1][0] * x[2][2] - x[1][2] * x[2][0])
        + x[0][2] * (x[1][0] * x[2][1] - x[1][1] * x[2][0]);
    return ans;
}
var matrixX = [
    [2,3,5,0],
    [3,1,-2,-2],
    [1,3,4,-3]
];
cramersRule(matrixX);